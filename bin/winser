#!/usr/bin/env node

var fs = require("fs");
var exec = require("child_process").exec;
var async = require("async");
var program = require("commander");
var path = require("path");

String.prototype.supplant = function (o) {
    return this.replace(/{([^{}]*)}/g,
        function (a, b) {
            var r = o[b];
            return typeof r === "string" || typeof r === "number" ? r : a;
        }
    );
};


function collect(val, memo) {
  memo.push(val);
  return memo;
}

program
  .version(require("../package.json").version)
  .option("-a, --autostart", "start the application immediately after installation")
  .option("-i, --install", "install the node application as a windows service")
  .option("-r, --remove",  "remove the windows service for the node application")
  .option("-x, --stop",  "stop the service before uninstalling")
  .option("-s, --silent",  "supress any information in the console")
  .option("-c, --confirmation", "ask for confirmation before installing/uninstalling")
  .option("-p, --path [path]", "path to the node application you want to install as a service [current directory]", process.cwd())
  .option("-n, --name [name]", "name for service [name from package.json] ")
  .option("--description [description]", "service description [description from package.json] ")
  .option("--displayname [name]", "display name for service")
  .option("--startuptype [type]", "set service startup type on boot (auto|manual|delayed|disabled) [auto]", "auto")
  .option("--env [envvar]", "propogate environment variable", collect, [])
  .parse(process.argv);


function log(message){
    !program.silent && console.log(message);
}

function getStartupType(){
    switch (program.startuptype){
        case "auto":
            return "SERVICE_AUTO_START";
        case "manual":
            return "SERVICE_DELAYED_START";
        case "delayed":
            return "SERVICE_DEMAND_START";
        case "disabled":
            return "SERVICE_DISABLED";
        default:
            return "SERVICE_AUTO_START";
    }
}

var quitState = "quit";
var appPackage = null;
var npmLocation = null;
var nssmLocation = null;

function nssmExec(command, arguments, callback){
    if (arguments === null)
        arguments = '';
    exec(nssmLocation + ' '+ command +' "'+ program.name '" ' + arguments,
        function(){
            if (stderr){
                !program.silent && console.error(stderr);
            }
            callback(err || stderr);
        });
}

async.series([
    function(next){
        var error = null;
        if (!program.install && !program.remove){
            process.stdout.write(program.helpInformation());
            error = quitState;
        }
        next(error);
    },
    function(next){
        var error = null;
        if (process.platform !== "win32"){
            error = 'Winser can only install services on windows.';
        }
        next(error);
    },
    function(next){
        var error = null;
        if (!(fs.existsSync||path.existsSync)(path.join(program.path, "package.json"))){
            error = '"' program.path '" doesn\'t seems to be a node application path.\nIt doesn\'t contains a package.json file.');
        }else{
            appPackage = require(path.join(program.path, "package.json"));
            program.name = program.name | appPackage.name;
            program.description = program.description | appPackage.description;
        }
        next(error);
    },
    function(next){
        exec('where npm.cmd', function(error, stdout) {
            if (error !== null) {
                next('Can\'t find npm...');
                return;
            }
            npmLocation = '"' + stdout.trim().split("\r\n")[0] + '"';
            next();
        });
    },
    function(next){
        exec('wmic CPU get AddressWidth < nul', function(err, stdout) {
            var arch = '32';
            if (!err && stdout) {
                arch = stdout.match(/(32|64)/)[1];
            }
            nssmLocation = '"' + path.join(__dirname, (arch === '64') ? 'nssm64.exe' : 'nssm.exe') + '"';
            next();
        });
    },
    function(next){
        if (!program.confirmation) {
            next();
        }else{
            var message = program.install ? 'continue installing "' + program.name + '" as a service? ' :
                                            'continue uninstalling the "' + program.name + '" service? ';
            program.confirm(message, function(ok){
                process.stdin.pause(); //i think this program.confirm thing doesnt close the stdin properly
                if(ok){
                    next();
                }else{
                    next(quitState);
                }
            });
        }
    },
    function(next){
        if (program.stop && program.remove){
            nssmExec('stop', null, next);
        }else{
            next();
        }
    },
    function(next){
        if(program.install){
            nssmExec('install', npmLocation + ' start',
                function(error){
                    if(!error){
                        log('The program "' +program.name '" was installed as a service.');
                    }
                    next(error);
                });
        }else if(program.remove){ 
            nssmExec('remove', null,
                function(error){
                    if(!error){
                        log('The service for "' +program.name '" was removed.');
                        error = quitState;
                    }
                    next(error);
                });
        }
    },
    function(next){
        nssmExec('set', 'AppDirectory "' + program.path + '"', 
            function(error){
                if (error)
                    next('Can\'t set startup folder for service');
                else
                    next();
            });
    },
    function(next){
        if (program.description){
            nssmExec('set', 'Description "' + program.description + '"', 
                function(error){
                    if (error)
                        next('Can\'t set description for service');
                    else
                        next();
                });
        }else{
            next();
        }
    },
    function(next){
        if (program.displayname){
            nssmExec('set', 'DisplayName "' + program.displayname + '"', 
                function(error){
                    if (error)
                        next('Can\'t set display name for service');
                    else
                        next();
                });
        }else{
            next();
        }
    },
    function(next){
        nssmExec('set', 'Start ' + getStartupType(),
            function(error){
                if (error)
                    next('Can\'t set startup type for service');
                else
                    next();
            });
    },
    function(next){
        if (program.env.lenght > 0){
            nssmExec('set', 'AppEnvironmentExtra "' + program.env.join(' ') + '"',
                function(error){
                    if (error)
                        next('Can\'t set environment for service');
                    else
                        next();
                });
        }else{
            next();
        }
    },
    function(next){
        if(program.autostart){
            nssmExec('start', null,
                function(error){
                    if(!error){
                        log('The service for "' +program.name '" was removed.');
                        next(quitState);
                    }else{
                        next(error);
                    }
                });
        }
    }
],
function(error){
    if(error === quitState)
        return;
    if(error){
        console.error(error);
        process.exit(1);
    }
});

